<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <PageId>acbcf7ed-113d-40d1-a022-a104917cbd82</PageId>
  <Text>{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fnil\fcharset0 Microsoft Sans Serif;}{\f1\fnil\fcharset129 \'b1\'bc\'b8\'b2;}{\f2\fnil\fcharset2 Symbol;}}
\viewkind4\uc1\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-300\li450\lang1042\f0\fs18 Vector\fs20\par
\pard\fs18\tab - Vector\f1\'b4\'c2 \'bd\'c3\'c4\'fd\'bd\'ba \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca\f0\fs20  \f1\fs18\'c0\'cc\'b8\'e9\'bc\'ad \'bf\'ac\'bc\'d3 \'b8\'de\'b8\'f0\'b8\'ae\f0\fs20  \f1\fs18\'b1\'e2\'b9\'dd \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca\'c0\'cc\'b8\'e7 \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca\'bf\'a1 \'b5\'a5\'c0\'cc\'c5\'cd\'b0\'a1 \'bb\'f0\'c0\'d4\'b5\'c7\'b8\'e9\'bc\'ad \'b8\'de\'b8\'f0\'b8\'ae\'b0\'a1 \'c0\'da\'b6\'f3\'b3\'ad\'b4\'d9.\par
\tab - \'bf\'ac\'bc\'d3 \'b8\'de\'b8\'f0\'b8\'ae\f0\fs20  \f1\fs18\'b1\'e2\'b9\'dd \'c0\'cc\'b9\'c7\'b7\'ce \'b8\'de\'b8\'f0\'b8\'ae\'b0\'a1 \'c0\'da\'b6\'f3 \'b3\'aa\'b8\'e9 \'b1\'e2\'c1\'b8 \'b8\'de\'b8\'f0\'b8\'ae\'b8\'a6 \'bb\'e8\'c1\'a6 \'c7\'cf\'b0\'ed \'bb\'f5\'b7\'ce\'bf\'ee \'b8\'de\'b8\'f0\'b8\'ae\'b8\'a6 \'c0\'e7\'c7\'d2\'b4\'e7 \'c7\'cf\'bf\'a9 \'bb\'e7\'bf\'eb\'c7\'d1\'b4\'d9.(\'b5\'bf\'c0\'fb \'b9\'e8\'bf\'ad)\par
\tab - \'c0\'d3\'c0\'c7 \'c1\'a2\'b1\'d9 \'b9\'dd\'ba\'b9\'c0\'da\'b8\'a6 \'c1\'f6\'bf\'f8\'c7\'d1\'b4\'d9.\par
\tab - \'c5\'ab \'c6\'af\'c2\'a1\'c1\'df \'c7\'cf\'b3\'aa\'b0\'a1 \'bf\'f8\'bc\'d2\'b0\'a1 \'c7\'cf\'b3\'aa\'c0\'c7 \'b8\'de\'b8\'f0\'b8\'ae\f0\fs20  \f1\fs18\'ba\'ed\'b7\'cf\'bf\'a1 \'bf\'ac\'bc\'d3\'c7\'cf\'b0\'d4 \'c0\'fa\'c0\'e5\'b5\'c8\'b4\'d9\'b4\'c2 \'b0\'cd.\par
\par
\tab - \'b0\'ad\'c1\'a1 : \par
\tab\tab 1. \'bf\'ac\'bc\'d3\'c0\'fb\'c0\'b8\'b7\'ce \'c0\'fa\'c0\'e5\'b5\'c7\'be\'ee\'c0\'d6\'b1\'e2 \'b6\'a7\'b9\'ae\'bf\'a1 [] \'bf\'ac\'bb\'ea\'c0\'da(\f0 index) \f1\'b8\'a6 \'c5\'eb\'c7\'d8 \'ba\'fc\'b8\'a5 \'c1\'a2\'b1\'d9 \'b0\'a1\'b4\'c9\par
\tab\tab 2. \'c0\'fb\'c0\'ba \'be\'e7\'c0\'c7 \'c0\'da\'b7\'e1\'bf\'a1 \'c0\'af\'b8\'ae\par
\tab\tab 3. \'c5\'a9\'b1\'e2 \'ba\'af\'b0\'e6\'b0\'a1\'b4\'c9\par
\tab\tab 4. \'bc\'f8\'c2\'f7 \'c1\'a2\'b1\'d9\'b0\'a1\'b4\'c9 ,\'b7\'a3\'b4\'fd \'be\'d7\'bc\'bc\'bd\'ba \'b0\'a1\'b4\'c9\par
\tab\tab 5. \'c4\'c1\'c5\'d7\'c0\'cc\'b3\'ca \'b3\'a1\'bf\'a1 \'bb\'f0\'c0\'d4 \'bb\'e8\'c1\'a6\'b4\'c2 \'ba\'fc\'b8\'a3\'b4\'d9.\par
\par
\tab - \'be\'e0\'c1\'a1 :\par
\tab\tab 1.  \'b8\'b8\'be\'e0 \'b0\'e8\'bc\'d3 \'b5\'a5\'c0\'cc\'c5\'cd\'c0\'c7 \'c5\'a9\'b1\'e2\'b0\'a1 \'b0\'e8\'bc\'d3 \'ba\'af\'c7\'d1\'b4\'d9\'b8\'e9 \'b4\'d9\'bd\'c3 \'b8\'de\'b8\'f0\'b8\'ae\'b8\'a6 \'c7\'d2\'b4\'e7\'c7\'d8\'bc\'ad \'c7\'d8\'be\'df \'c7\'cf\'b9\'c7\'b7\'ce \'ba\'f1\'c8\'bf\'c0\'b2\'c0\'fb\par
\tab\tab 2.  \f0 insert, earse, push_back \f1\'b5\'ee\'c0\'c7 \'ba\'f1\'c8\'bf\'c0\'b2\'c0\'fb\'c0\'cc\'b0\'d4 \'b5\'bf\'c0\'db (\'c1\'df\'b0\'a3\'bf\'a1 \'bb\'e8\'c1\'a6 \'bb\'f0\'c0\'d4 \'ba\'f1\'c8\'bf\'c0\'b2\'c0\'fb)\par
\tab\tab 3.  \'b0\'cb\'bb\'f6\'bc\'d3\'b5\'b5 \'b4\'c0\'b8\'b2\par
\f0\fs20\tab\tab 4.  \f1\'b8\'b9\'c0\'ba\'be\'e7\'c0\'c7 \'c0\'da\'b7\'e1 \'ba\'d2\'b8\'ae\par
\par
\tab - \'c1\'d6\'c0\'c7 :\par
\tab\tab capacity\'b8\'a6 \'c8\'ae\'c0\'e5 \'bd\'c3\'c4\'d1\'c1\'d9 \'bc\'f6 \'c0\'d6\'b4\'c2 \'c0\'fb\'c0\'fd\'c7\'d1 \'c5\'a9\'b1\'e2\'c0\'c7 reserve\'b7\'ce \'c0\'ce\'c7\'d1 \'b8\'de\'b8\'f0\'b8\'ae \'c8\'ae\'ba\'b8\'b0\'a1 \'c1\'df\'bf\'e4.\f0\par
}
&#x0;</Text>
  <Encrypted>false</Encrypted>
  <Name>Vector</Name>
  <CreatedBy>Anonymous</CreatedBy>
  <CreatedOn>2017-03-25T16:20:30.4467874+09:00</CreatedOn>
  <UpdatedBy>Anonymous</UpdatedBy>
  <UpdatedOn>2017-03-28T11:11:48.9436824+09:00</UpdatedOn>
  <Words>Vector
	- Vector는 시퀸스 컨테이너 이면서 연속 메모리 기반 컨테이너이며 컨테이너에 데이터가 삽입되면서 메모리가 자라난다.
	- 연속 메모리 기반 이므로 메모리가 자라 나면 기존 메모리를 삭제 하고 새로운 메모리를 재할당 하여 사용한다.(동적 배열)
	- 임의 접근 반복자를 지원한다.
	- 큰 특징중 하나가 원소가 하나의 메모리 블록에 연속하게 저장된다는 것.

	- 강점 : 
		1. 연속적으로 저장되어있기 때문에 [] 연산자(index) 를 통해 빠른 접근 가능
		2. 적은 양의 자료에 유리
		3. 크기 변경가능
		4. 순차 접근가능 ,랜덤 액세스 가능
		5. 컨테이너 끝에 삽입 삭제는 빠르다.

	- 약점 :
		1.  만약 계속 데이터의 크기가 계속 변한다면 다시 메모리를 할당해서 해야 하므로 비효율적
		2.  insert, earse, push_back 등의 비효율적이게 동작 (중간에 삭제 삽입 비효율적)
		3.  검색속도 느림
		4.  많은양의 자료 불리

	- 주의 :
		capacity를 확장 시켜줄 수 있는 적절한 크기의 reserve로 인한 메모리 확보가 중요.</Words>
  <PublishedOn>0001-01-01T00:00:00</PublishedOn>
  <PublishedUrl />
  <PublishedService>0</PublishedService>
</Page>